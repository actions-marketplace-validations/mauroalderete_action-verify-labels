name: 'Verify Labels in Pull Request '
description: 'It verifies that the pull request has the expected labels'
inputs:
  all:
    description: | 
      List of the labels.
      The pull request must be assigned with all of these labels listed.
    required: false
    default: ''
  none:
    description: | 
      List of the labels.
      The pull request must not be assigned with any of these labels listed.
    required: false
    default: ''
  some:
    description: | 
      List of the labels.
      The pull request must be assigned with one or more of these labels listed.
    required: false
    default: ''
  just-one:
    description: | 
      List of the labels.
      The pull request must be assigned only one of these labels listed.
    required: false
    default: ''
  request-review:
    description: | 
      Boolean flag. False by default.
      Should send a request review to notify whether the pull request passed or not this verification.
    required: false
    default: 'true'
  request-review-header:
    description: |
      A string that is attached to the beginning of the review comment.
      Supports GitHub Flavored Markdown.
    required: false
    default: 'true'
  github-token:
    description: 'The Github token. Only is required if request-review == true.'
    required: false
    default: ''
  pull-request-number:
    description: |
      The pull request number to verify.
      Only is required if this action isn't run on a pull_request event.
    required: false
    default: ''
outputs:
  approved:
    description: 'Boolean that indicates if the pull request approved this verification or not.'
    value: ${{ steps.exit.outputs.approved }}
  action-status:
    description: 'Execution status of the action'
    value: ${{ steps.exit.outputs.action-status }}
  action-message:
    description: 'Message associated to the current status of the action'
    value: ${{ steps.exit.outputs.action-message }}
runs:
  using: 'composite'
  steps:
    - name: Validation
      id: validation
      shell: bash
      run: |
        #!/bin/sh
        # Update action status
        echo "ACTION_STATUS=${{ steps.validation.name }}" >> $GITHUB_ENV
        echo "ACTION_MESSAGE=" >> $GITHUB_ENV
        echo "VERIFIED=false" >> $GITHUB_ENV

        # Validate pull-request-input
        if [[ '${{ github.event_name }}' != 'pull_request' && '${{ inputs.pull-request-number }}' == '' ]]; then
          echo "ACTION_STATUS=FAILED" >> $GITHUB_ENV;
          echo "ACTION_MESSAGE=pull-request-number is required because the event '${{ github.event_name }}' is not a pull_request event" >> $GITHUB_ENV;
          exit 1;
        fi

        # Validate github-token
        if [[ '${{ inputs.request-review }}' == 'true' && '${{ inputs.github-token }}' == '' ]]; then
          echo "ACTION_STATUS=FAILED" >> $GITHUB_ENV;
          echo "ACTION_MESSAGE=github-token is required when request-review is 'true'" >> $GITHUB_ENV;
          exit 1;
        fi

        ALL_LABELS=$(echo ${{ inputs.all }} | sed 's/, /\", \"/g' | awk '{ print "[\""$0"\"]"}')
        NONE_LABELS=$(echo ${{ inputs.none }} | sed 's/, /\", \"/g' | awk '{ print "[\""$0"\"]"}')
        SOME_LABELS=$(echo ${{ inputs.some }} | sed 's/, /\", \"/g' | awk '{ print "[\""$0"\"]"}')
        JUST_ONE_LABELS=$(echo ${{ inputs.just-on }} | sed 's/, /\", \"/g' | awk '{ print "[\""$0"\"]"}')

        echo "ALL_LABELS=$ALL_LABELS" >> $GITHUB_ENV
        echo "NONE_LABELS=$NONE_LABELS" >> $GITHUB_ENV
        echo "SOME_LABELS=$SOME_LABELS" >> $GITHUB_ENV
        echo "JUST_ONE_LABELS=$JUST_ONE_LABELS" >> $GITHUB_ENV

        # Store token in env to easy the Github CLI authorization
        echo "GITHUB_TOKEN=${{ inputs.github-token }}" >> $GITHUB_ENV

    - name: Get labels from pull-request event
      if: github.event_name == 'pull_request'
      id: labels-from-event
      shell: bash
      run: |
        #!/bin/sh
        # Update action status
        echo "ACTION_STATUS=${{ steps.labels-from-event.name }}" >> $GITHUB_ENV
        echo "ACTION_MESSAGE=" >> $GITHUB_ENV
        
        # Get labels list from event context
        labels=$(cat << EOF
        ${{ toJson(github.event.pull_request.labels.*.name) }}
        EOF
        )

        # Store the pull request labels found
        echo "LABELS=$(echo $labels)" >> $GITHUB_ENV

    - name: Get labels from input
      if: github.event_name != 'pull_request'
      id: labels-from-input
      shell: bash
      run: |
        #!/bin/sh
        # Update action status
        echo "ACTION_STATUS=${{ steps.labels-from-input.name }}" >> $GITHUB_ENV
        echo "ACTION_MESSAGE=" >> $GITHUB_ENV
        
        # Get labels list from github client by pull request number
        labels=$(gh pr view ${{ inputs.pull-request-number }} --json labels | jq '.labels[].name' -c)
        
        # Store the pull request labels found
        echo "LABELS=$labels" >> $GITHUB_ENV

    - name: End
      id: end
      shell: bash
      run: |
        #!/bin/sh
        echo "ACTION_STATUS=${{ steps.end.name }}" >> $GITHUB_ENV
        echo "ACTION_MESSAGE=" >> $GITHUB_ENV

        echo "all: $ALL_LABELS"
        echo "none: $NONE_LABELS"
        echo "some: $SOME_LABELS"
        echo "just-one: $JUST_ONE_LABELS"
        echo "labels: $LABELS"

    - name: Exit
      if: ${{ always() }}
      id: exit
      shell: bash
      run: |
        echo "::set-output name=approved::$VERIFIED"
        echo "::set-output name=action-status::$ACTION_STATUS"
        echo "::set-output name=action-message::$ACTION_MESSAGE"

    - name: Exit with error
      if: ${{ failure() }}
      id: exit-with-error
      shell: bash
      run: |
        echo "$ACTION_STATUS, $ACTION_MESSAGE"
        exit 1;